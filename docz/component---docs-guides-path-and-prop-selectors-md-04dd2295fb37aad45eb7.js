(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{s5sz:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return a})),n.d(t,"default",(function(){return l}));n("1c7q"),n("abGl"),n("gZHo"),n("Fdmb"),n("Ir+3"),n("2mQt"),n("mXGw");var r=n("/FXl"),o=n("TjRS");n("aD51");function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var a={};void 0!==a&&a&&a===Object(a)&&Object.isExtensible(a)&&!a.hasOwnProperty("__filemeta")&&Object.defineProperty(a,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/guides/path-and-prop-selectors.md"}});var p={_frontmatter:a},c=o.a;function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,["components"]);return Object(r.b)(c,s({},p,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"path--prop-selectors"},"Path & Prop Selectors"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Path Selector")," helper is useful when you try to describe deep nested dependencies of your selector. Suppose you have such state:"),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-js"}),"const state = {\n  person: {\n    id: 1,\n    firstName: 'Marry',\n    secondName: 'Poppins',\n  },\n};\n")),Object(r.b)("p",null,"Lets's write simple selector for it:"),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-js"}),"const personFullNameSelector = createSelector(\n  state => state.person.firstName,\n  state => state.person.secondName,\n  (firstName, secondName) => `${firstName} ${secondName}`,\n);\n")),Object(r.b)("p",null,"It is working example and now we don't need any helper to implement it. But what if our ",Object(r.b)("inlineCode",{parentName:"p"},"person")," object is optional. We can re-write our example next way:"),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-js"}),"const personFullNameSelector = createSelector(\n  state => state.person && state.person.firstName,\n  state => state.person && state.person.secondName,\n  (firstName, secondName) => `${firstName} ${secondName}`,\n);\n")),Object(r.b)("p",null,"I can also use ",Object(r.b)("a",s({parentName:"p"},{href:"https://github.com/tc39/proposal-optional-chaining"}),"optional chaining")," to reduce and simplify code:"),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-js"}),"const personFullNameSelector = createSelector(\n  state => state.person?.firstName,\n  state => state.person?.secondName,\n  (firstName, secondName) => `${firstName} ${secondName}`,\n);\n")),Object(r.b)("p",null,"Yes, we still don't need any helper now. But what if we have normalized state with few optional persons:"),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-js"}),"const state = {\n  persons: {\n    1: {\n      id: 1,\n      firstName: 'Marry',\n      secondName: 'Poppins',\n    },\n    2: {\n      id: 2,\n      firstName: 'Harry',\n      secondName: 'Potter',\n    },\n  },\n};\n")),Object(r.b)("p",null,"In this case you need provide ",Object(r.b)("inlineCode",{parentName:"p"},"personId")," property in your selector. ",Object(r.b)("a",s({parentName:"p"},{href:"https://github.com/toomuchdesign/re-reselect"}),"Re-reselect")," library is better for parametric selector, so now we can write something like this:"),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-js"}),"import createCachedSelector from 're-reselect';\n\nconst personFullNameSelector = createCachedSelector(\n  (state, props) => state.persons[props.personId]?.firstName,\n  (state, props) => state.persons[props.personId]?.secondName,\n  (firstName, secondName) => `${firstName} ${secondName}`,\n)({\n  keySelector: (state, props) => props.personId,\n});\n")),Object(r.b)("p",null,"If you use ",Object(r.b)("a",s({parentName:"p"},{href:"https://www.typescriptlang.org/"}),"TypeScript")," for static typing this example can look more complex:"),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-typescript"}),"const personFullNameSelector = createCachedSelector(\n  (state: State, props: Props) => state.persons[props.personId]?.firstName,\n  (state: State, props: Props) => state.persons[props.personId]?.secondName,\n  (firstName, secondName) => `${firstName} ${secondName}`,\n)({\n  keySelector: (state, props) => props.personId,\n});\n")),Object(r.b)("p",null,"Now we can use ",Object(r.b)("inlineCode",{parentName:"p"},"Path Selector")," to reduce boilerplate code:"),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-typescript"}),"import { createPathSelector } from 'reselect-utils';\n\nconst personsSelector = (state: State) => state.persons;\n\nconst personSelector = createCachedSelector(\n  personsSelector,\n  (state: State, props: Props) => props.personId,\n  (persons, personId) => persons[personId],\n)({\n  keySelector: (state, props) => props.personId,\n});\n\nconst personFullNameSelector = createCachedSelector(\n  createPathSelector(personSelector).firstName(),\n  createPathSelector(personSelector).secondName(),\n  (firstName, secondName) => `${firstName} ${secondName}`,\n)({\n  keySelector: (state, props) => props.personId,\n});\n")),Object(r.b)("p",null,"There is short alias for ",Object(r.b)("inlineCode",{parentName:"p"},"Path Selector")," helper. Also there is another ",Object(r.b)("inlineCode",{parentName:"p"},"Prop Selector")," helper for properties selection. ",Object(r.b)("inlineCode",{parentName:"p"},"Prop Selector")," is built on top ",Object(r.b)("inlineCode",{parentName:"p"},"Path Selector"),". With this helpers you can re-write your code like this:"),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-typescript"}),"import { path, prop } from 'reselect-utils';\n\nconst personsSelector = (state: State) => state.persons;\n\nconst personSelector = createCachedSelector(\n  personsSelector,\n  prop<Props>().personId(),\n  (persons, personId) => persons[personId],\n)({\n  keySelector: prop<Props>().personId(),\n});\n\nconst personFullNameSelector = createCachedSelector(\n  path(personSelector).firstName(),\n  path(personSelector).secondName(),\n  (firstName, secondName) => `${firstName} ${secondName}`,\n)({\n  keySelector: prop<Props>().personId(),\n});\n")),Object(r.b)("p",null,"Now we have fully typed selector, that is cached by different properties."),Object(r.b)("p",null,"You can also work with objects of unlimited nesting:"),Object(r.b)("pre",null,Object(r.b)("code",s({parentName:"pre"},{className:"language-typescript"}),"import { path } from 'reselect-utils';\n\nconst personSelectorInfo = createSelector(\n  path(personSelector).address.street('-'),\n  path(personSelector).some.very.deep.field(123),\n  (street, field) => ({ street, field }),\n)({\n  keySelector: prop<Props>().personProps.personId(),\n});\n")))}l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/guides/path-and-prop-selectors.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-guides-path-and-prop-selectors-md-04dd2295fb37aad45eb7.js.map