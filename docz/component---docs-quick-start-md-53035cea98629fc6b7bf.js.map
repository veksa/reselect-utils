{"version":3,"sources":["webpack:///../docs/quick-start.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,qMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,iBAAQ,CACN,GAAM,iBADR,iBAGA,kEACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,+NAiBL,4EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kPAQL,8JAA6I,0BAAYA,WAAW,KAAvB,sBAA7I,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+VAYL,oJAAmI,0BAAYA,WAAW,KAAvB,UAAnI,WAAiM,0BAAYA,WAAW,KAAvB,SAAjM,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+RAUL,2HACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qPAUL,6EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0OAUL,iEAAgD,mBAAGA,WAAW,KAAQ,CAClE,KAAQ,8CADoC,QAAhD,KAGA,iBAAQ,CACN,GAAM,kBADR,kBAGA,kEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gZA8BL,8GACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iKAQL,yFAAwE,0BAAYA,WAAW,KAAvB,kBAAxE,sCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iWAWL,qBAAG,0BAAYA,WAAW,KAAvB,kBAAH,0HAAwL,0BAAYA,WAAW,KAAvB,SAAxL,0CAAoR,0BAAYA,WAAW,KAAvB,SAApR,6IAAmd,0BAAYA,WAAW,KAAvB,SAAnd,4DAAikB,mBAAGA,WAAW,KAAQ,CACnlB,KAAQ,uFADqjB,YAAjkB,KAE2B,mBAAGA,WAAW,KAAQ,CAC7C,KAAQ,qCADe,kBAF3B,QAIoC,mBAAGA,WAAW,KAAQ,CACtD,KAAQ,kDADwB,kBAJpC,gD,4LAWJJ,EAAWK,gBAAiB","file":"component---docs-quick-start-md-53035cea98629fc6b7bf.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/sergey/IdeaProjects/reselect-utils/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"quick-start\"\n    }}>{`Quick Start`}</h1>\n    <h2 {...{\n      \"id\": \"path-selector\"\n    }}>{`Path Selector`}</h2>\n    <p>{`Suppose you have such a normalized state:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const state = {\n  persons: {\n    1: {\n      id: 1,\n      firstName: 'Marry',\n      secondName: 'Poppins',\n    },\n    2: {\n      id: 2,\n      firstName: 'Harry',\n      secondName: 'Potter',\n    },\n  },\n};\n`}</code></pre>\n    <p>{`And you want to build something like this selector:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const personFullNameSelector = createSelector(\n  (state, props) => state.persons[props.personId].firstName,\n  (state, props) => state.persons[props.personId].secondName,\n  (firstName, secondName) => \\`\\${firstName} \\${secondName}\\`,\n);\n`}</code></pre>\n    <p>{`As you can see in the dependencies of this selector quite a lot of boilerplate code. The problem of duplicate code can be solved with `}<inlineCode parentName=\"p\">{`createPathSelector`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { createPathSelector } from 'reselect-utils';\n\nconst personSelector = (state, props) => state.persons[props.personId];\n\nconst personFullNameSelector = createSelector(\n  createPathSelector(personSelector).firstName(),\n  createPathSelector(personSelector).secondName(),\n  (firstName, secondName) => \\`\\${firstName} \\${secondName}\\`,\n);\n`}</code></pre>\n    <p>{`You can also add default values if you want the selector to produce an adequate result even in the absence of the necessary `}<inlineCode parentName=\"p\">{`person`}</inlineCode>{` in the `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { createPathSelector } from 'reselect-utils';\n\nconst personFullNameSelector = createSelector(\n  createPathSelector(personSelector).firstName('John'),\n  createPathSelector(personSelector).secondName('Doe'),\n  (firstName, secondName) => \\`\\${firstName} \\${secondName}\\`,\n);\n`}</code></pre>\n    <p>{`There are short aliases for many helpers in this library, so you can re-write your code like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { path } from 'reselect-utils';\n\nconst personFullNameSelector = createSelector(\n  path(personSelector).firstName('John'),\n  path(personSelector).secondName('Doe'),\n  (firstName, secondName) => \\`\\${firstName} \\${secondName}\\`,\n);\n`}</code></pre>\n    <p>{`You can also work with objects of unlimited nesting:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { path } from 'reselect-utils';\n\nconst personSelectorInfo = createSelector(\n  path(personSelector).address.street('-'),\n  path(personSelector).some.very.deep.field(123),\n  (street, field) => ({ street, field }),\n);\n`}</code></pre>\n    <p>{`A more detailed description can be found `}<a parentName=\"p\" {...{\n        \"href\": \"/reference/guides/path-and-prop-selectors\"\n      }}>{`here`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"chain-selector\"\n    }}>{`Chain Selector`}</h2>\n    <p>{`Suppose you have such a normalized state:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const state = {\n  persons: {\n    1: {\n      id: 1,\n      firstName: 'Marry',\n      secondName: 'Poppins',\n    },\n    2: {\n      id: 2,\n      firstName: 'Harry',\n      secondName: 'Potter',\n    },\n  },\n\n  messages: {\n    100: {\n      id: 100,\n      personId: 1,\n      text: 'Hello',\n    },\n    200: {\n      id: 200,\n      personId: 2,\n      text: 'Buy',\n    },\n  },\n};\n`}</code></pre>\n    <p>{`And you want to select a person by the message id. You can write something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const personSelectorByMessageId = (state, props) => {\n  const message = state.messages[props.messageId];\n\n  return state.persons[message.personId];\n};\n`}</code></pre>\n    <p>{`This is an acceptable solution, but what if the chain is longer? `}<inlineCode parentName=\"p\">{`Chain Selector`}</inlineCode>{` will help to solve such problems:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { chain, bound } from 'reselect-utils';\n\nconst messageSelector = (state, props) => state.messages[props.messageId];\nconst personSelector = (state, props) => state.persons[props.personId];\n\nconst personByMessageIdSelector = chain(messageSelector)\n  .chain(message => bound(personSelector, { personId: message.personId }))\n  .build();\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`Chain Selector`}</inlineCode>{` allows you to create dynamic selectors that depend on the current state. Moreover, the callback that is passed to the `}<inlineCode parentName=\"p\">{`chain`}</inlineCode>{` method is cached by input parameters. `}<inlineCode parentName=\"p\">{`bound`}</inlineCode>{` binds the selector to specific parameter values and turns a parametric selector into an non parametric. And at the end you must call the `}<inlineCode parentName=\"p\">{`build`}</inlineCode>{` method to get the normal selector. Itâ€™s like a chain of `}<a parentName=\"p\" {...{\n        \"href\": \"https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise\"\n      }}>{`Promises`}</a>{`. `}<a parentName=\"p\" {...{\n        \"href\": \"/reference/guides/chain-selector\"\n      }}>{`Chain Selector`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"/reference/guides/bound-and-adapted-selectors\"\n      }}>{`Bound Selector`}</a>{` are described in detail in Guides section.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}