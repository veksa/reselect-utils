{"version":3,"sources":["webpack:///../docs/guides/path-and-prop-selectors.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"kfAMO,IAAMA,EAAe,Q,wNAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,wBADR,yBAGA,qBAAG,0BAAYC,WAAW,KAAvB,iBAAH,sHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8GAUL,6DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8LAQL,gHAA+F,0BAAYA,WAAW,KAAvB,UAA/F,8DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8NAQL,uCAAsB,mBAAGA,WAAW,KAAQ,CACxC,KAAQ,uDADU,qBAAtB,iCAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gMAQL,iIACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+NAiBL,sDAAqC,0BAAYA,WAAW,KAAvB,YAArC,+BAAyH,mBAAGA,WAAW,KAAQ,CAC3I,KAAQ,iDAD6G,eAAzH,wFAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qWAYL,mCAAkB,mBAAGA,WAAW,KAAQ,CACpC,KAAQ,oCADM,cAAlB,0DAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,8UAUL,uCAAsB,0BAAYA,WAAW,KAAvB,iBAAtB,gCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,8mBAsBL,iDAAgC,0BAAYA,WAAW,KAAvB,iBAAhC,kCAA4H,0BAAYA,WAAW,KAAvB,iBAA5H,qCAA2N,0BAAYA,WAAW,KAAvB,iBAA3N,oBAAyS,0BAAYA,WAAW,KAAvB,iBAAzS,6DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,oiBAsBL,kGACA,6EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,uS,+MAgBTJ,EAAWK,gBAAiB","file":"component---docs-guides-path-and-prop-selectors-md-04dd2295fb37aad45eb7.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/sergey/IdeaProjects/reselect-utils/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"path--prop-selectors\"\n    }}>{`Path & Prop Selectors`}</h1>\n    <p><inlineCode parentName=\"p\">{`Path Selector`}</inlineCode>{` helper is useful when you try to describe deep nested dependencies of your selector. Suppose you have such state:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const state = {\n  person: {\n    id: 1,\n    firstName: 'Marry',\n    secondName: 'Poppins',\n  },\n};\n`}</code></pre>\n    <p>{`Lets's write simple selector for it:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const personFullNameSelector = createSelector(\n  state => state.person.firstName,\n  state => state.person.secondName,\n  (firstName, secondName) => \\`\\${firstName} \\${secondName}\\`,\n);\n`}</code></pre>\n    <p>{`It is working example and now we don't need any helper to implement it. But what if our `}<inlineCode parentName=\"p\">{`person`}</inlineCode>{` object is optional. We can re-write our example next way:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const personFullNameSelector = createSelector(\n  state => state.person && state.person.firstName,\n  state => state.person && state.person.secondName,\n  (firstName, secondName) => \\`\\${firstName} \\${secondName}\\`,\n);\n`}</code></pre>\n    <p>{`I can also use `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/tc39/proposal-optional-chaining\"\n      }}>{`optional chaining`}</a>{` to reduce and simplify code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const personFullNameSelector = createSelector(\n  state => state.person?.firstName,\n  state => state.person?.secondName,\n  (firstName, secondName) => \\`\\${firstName} \\${secondName}\\`,\n);\n`}</code></pre>\n    <p>{`Yes, we still don't need any helper now. But what if we have normalized state with few optional persons:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const state = {\n  persons: {\n    1: {\n      id: 1,\n      firstName: 'Marry',\n      secondName: 'Poppins',\n    },\n    2: {\n      id: 2,\n      firstName: 'Harry',\n      secondName: 'Potter',\n    },\n  },\n};\n`}</code></pre>\n    <p>{`In this case you need provide `}<inlineCode parentName=\"p\">{`personId`}</inlineCode>{` property in your selector. `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/toomuchdesign/re-reselect\"\n      }}>{`Re-reselect`}</a>{` library is better for parametric selector, so now we can write something like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import createCachedSelector from 're-reselect';\n\nconst personFullNameSelector = createCachedSelector(\n  (state, props) => state.persons[props.personId]?.firstName,\n  (state, props) => state.persons[props.personId]?.secondName,\n  (firstName, secondName) => \\`\\${firstName} \\${secondName}\\`,\n)({\n  keySelector: (state, props) => props.personId,\n});\n`}</code></pre>\n    <p>{`If you use `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.typescriptlang.org/\"\n      }}>{`TypeScript`}</a>{` for static typing this example can look more complex:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`const personFullNameSelector = createCachedSelector(\n  (state: State, props: Props) => state.persons[props.personId]?.firstName,\n  (state: State, props: Props) => state.persons[props.personId]?.secondName,\n  (firstName, secondName) => \\`\\${firstName} \\${secondName}\\`,\n)({\n  keySelector: (state, props) => props.personId,\n});\n`}</code></pre>\n    <p>{`Now we can use `}<inlineCode parentName=\"p\">{`Path Selector`}</inlineCode>{` to reduce boilerplate code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { createPathSelector } from 'reselect-utils';\n\nconst personsSelector = (state: State) => state.persons;\n\nconst personSelector = createCachedSelector(\n  personsSelector,\n  (state: State, props: Props) => props.personId,\n  (persons, personId) => persons[personId],\n)({\n  keySelector: (state, props) => props.personId,\n});\n\nconst personFullNameSelector = createCachedSelector(\n  createPathSelector(personSelector).firstName(),\n  createPathSelector(personSelector).secondName(),\n  (firstName, secondName) => \\`\\${firstName} \\${secondName}\\`,\n)({\n  keySelector: (state, props) => props.personId,\n});\n`}</code></pre>\n    <p>{`There is short alias for `}<inlineCode parentName=\"p\">{`Path Selector`}</inlineCode>{` helper. Also there is another `}<inlineCode parentName=\"p\">{`Prop Selector`}</inlineCode>{` helper for properties selection. `}<inlineCode parentName=\"p\">{`Prop Selector`}</inlineCode>{` is built on top `}<inlineCode parentName=\"p\">{`Path Selector`}</inlineCode>{`. With this helpers you can re-write your code like this:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { path, prop } from 'reselect-utils';\n\nconst personsSelector = (state: State) => state.persons;\n\nconst personSelector = createCachedSelector(\n  personsSelector,\n  prop<Props>().personId(),\n  (persons, personId) => persons[personId],\n)({\n  keySelector: prop<Props>().personId(),\n});\n\nconst personFullNameSelector = createCachedSelector(\n  path(personSelector).firstName(),\n  path(personSelector).secondName(),\n  (firstName, secondName) => \\`\\${firstName} \\${secondName}\\`,\n)({\n  keySelector: prop<Props>().personId(),\n});\n`}</code></pre>\n    <p>{`Now we have fully typed selector, that is cached by different properties.`}</p>\n    <p>{`You can also work with objects of unlimited nesting:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { path } from 'reselect-utils';\n\nconst personSelectorInfo = createSelector(\n  path(personSelector).address.street('-'),\n  path(personSelector).some.very.deep.field(123),\n  (street, field) => ({ street, field }),\n)({\n  keySelector: prop<Props>().personProps.personId(),\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}