(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{rMSj:function(e,t,s){"use strict";s.r(t),s.d(t,"_frontmatter",(function(){return o})),s.d(t,"default",(function(){return l}));s("1c7q"),s("abGl"),s("gZHo"),s("Fdmb"),s("Ir+3"),s("2mQt"),s("mXGw");var n=s("/FXl"),r=s("TjRS");s("aD51");function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var n in s)Object.prototype.hasOwnProperty.call(s,n)&&(e[n]=s[n])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/guides/bound-and-adapted-selectors.md"}});var c={_frontmatter:o},p=r.a;function l(e){var t=e.components,s=function(e,t){if(null==e)return{};var s,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)s=a[n],t.indexOf(s)>=0||(r[s]=e[s]);return r}(e,["components"]);return Object(n.b)(p,a({},c,s,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"bound--adapted-selectors"},"Bound & Adapted Selectors"),Object(n.b)("p",null,"Some times you may need to bind your parametric selector with certain fixed properties. There is ",Object(n.b)("inlineCode",{parentName:"p"},"Bound Selector")," helper for this cases. For example, you have this normalized state:"),Object(n.b)("pre",null,Object(n.b)("code",a({parentName:"pre"},{className:"language-js"}),"const state = {\n  messages: {\n    input: {\n      100: {\n        id: 100,\n        text: 'Hello',\n      },\n      200: {\n        id: 200,\n        text: 'Buy',\n      },\n    },\n    output: {\n      100: {\n        id: 100,\n        text: 'How are you?',\n      },\n      200: {\n        id: 200,\n        text: 'I am fine, and you?',\n      },\n    },\n  },\n};\n")),Object(n.b)("p",null,"And you have this selector:"),Object(n.b)("pre",null,Object(n.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"import createCachedSelector from 're-reselect';\nimport { path, prop } from 'reselect-utils';\n\nconst messagesSelector = (state: State) => state.messages;\n\nconst messageSelector = createCachedSelector(\n  messagesSelector,\n  prop<Props>().messageType(),\n  prop<Props>().messageId(),\n  (messages, messageType, messageId) => messages[messageType][messageId],\n)({\n  keySelector: (state, props) => `${props.messageType}:${props.messageId}`,\n});\n")),Object(n.b)("p",null,"You can create selector only for input or output messages using ",Object(n.b)("inlineCode",{parentName:"p"},"Bound Selector"),":"),Object(n.b)("pre",null,Object(n.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"import { createBoundSelector, bound } from 'reselect-utils';\n\nconst inputMessageSelector = createBoundSelector(messageSelector, {\n  messageType: 'input',\n});\n\ninputMessageSelector(state, { messageId: 100 }); // => { text: 'Hello' }\n\nconst outputMessageSelector = bound(messageSelector, { messageType: 'output' });\n\noutputMessageSelector(state, { messageId: 100 }); // => { text: 'How are you?' }\n")),Object(n.b)("p",null,"There is another problem with parametric selectors. Sometimes you have one interface of props but interface of selector you need is different. With ",Object(n.b)("inlineCode",{parentName:"p"},"Adapted Selector")," helper you can switch shape of selector properties. Imagine, that you need to write next selector:"),Object(n.b)("pre",null,Object(n.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"messageDiffSelector(state, { sourceMessageId, targetMessageId });\n")),Object(n.b)("p",null,"You can create it this way:"),Object(n.b)("pre",null,Object(n.b)("code",a({parentName:"pre"},{className:"language-typescript"}),"import createCachedSelector from 're-reselect';\nimport { createAdaptedSelector, adapt } from 'reselect-utils';\n\nconst sourceMessageSelector = createAdaptedSelector(\n  inputMessageSelector,\n  (props: { sourceMessageId: number }) => ({\n    messageId: props.sourceMessageId,\n  }),\n);\n\nconst targetMessageSelector = adapt(\n  outputMessageSelector,\n  (props: { targetMessageId: number }) => ({\n    messageId: props.targetMessageId,\n  }),\n);\n\nconst messageDiffSelector = createCachedSelector(\n  sourceMessageSelector,\n  targetMessageSelector,\n  (sourceMessage, targetMessage) => ({\n    sourceMessage,\n    targetMessage,\n  }),\n)({\n  keySelector: (state, props) =>\n    `${props.sourceMessageId}:${props.targetMessageId}`,\n});\n")))}l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/guides/bound-and-adapted-selectors.md"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-guides-bound-and-adapted-selectors-md-2554bb59a85d2c039cb4.js.map