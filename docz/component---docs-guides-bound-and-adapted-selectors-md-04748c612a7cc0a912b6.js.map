{"version":3,"sources":["webpack:///../docs/guides/bound-and-adapted-selectors.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,4NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,4BADR,6BAGA,yHAAwG,0BAAYC,WAAW,KAAvB,kBAAxG,wEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uXA2BL,oDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,wcAgBL,wFAAuE,0BAAYA,WAAW,KAAvB,kBAAvE,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,saAcL,4KAA2J,0BAAYA,WAAW,KAAvB,oBAA3J,uGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,wEAIL,oDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,gvB,mNAmCTJ,EAAWK,gBAAiB","file":"component---docs-guides-bound-and-adapted-selectors-md-04748c612a7cc0a912b6.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/sergey/IdeaProjects/reselect-utils/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"bound--adapted-selectors\"\n    }}>{`Bound & Adapted Selectors`}</h1>\n    <p>{`Some times you may need to bind your parametric selector with certain fixed properties. There is `}<inlineCode parentName=\"p\">{`Bound Selector`}</inlineCode>{` helper for this cases. For example, you have this normalized state:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const state = {\n  messages: {\n    input: {\n      100: {\n        id: 100,\n        text: 'Hello',\n      },\n      200: {\n        id: 200,\n        text: 'Buy',\n      },\n    },\n    output: {\n      100: {\n        id: 100,\n        text: 'How are you?',\n      },\n      200: {\n        id: 200,\n        text: 'I am fine, and you?',\n      },\n    },\n  },\n};\n`}</code></pre>\n    <p>{`And you have this selector:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import createCachedSelector from 're-reselect';\nimport { path, prop } from 'reselect-utils';\n\nconst messagesSelector = (state: State) => state.messages;\n\nconst messageSelector = createCachedSelector(\n  messagesSelector,\n  prop<Props>().messageType(),\n  prop<Props>().messageId(),\n  (messages, messageType, messageId) => messages[messageType][messageId],\n)({\n  keySelector: (state, props) => \\`\\${props.messageType}:\\${props.messageId}\\`,\n});\n`}</code></pre>\n    <p>{`You can create selector only for input or output messages using `}<inlineCode parentName=\"p\">{`Bound Selector`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { createBoundSelector, bound } from 'reselect-utils';\n\nconst inputMessageSelector = createBoundSelector(messageSelector, {\n  messageType: 'input',\n});\n\ninputMessageSelector(state, { messageId: 100 }); // => { text: 'Hello', ... }\n\nconst outputMessageSelector = bound(messageSelector, { messageType: 'output' });\n\noutputMessageSelector(state, { messageId: 100 }); // => { text: 'How are you?', ... }\n`}</code></pre>\n    <p>{`There is another problem with parametric selectors. Sometimes you have one interface of props but interface of selector you need is different. With `}<inlineCode parentName=\"p\">{`Adapted Selector`}</inlineCode>{` helper you can switch shape of selector properties. Imagine, that you need to write next selector:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`messageDiffSelector(state, { sourceMessageId, targetMessageId });\n`}</code></pre>\n    <p>{`You can create it this way:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import createCachedSelector from 're-reselect';\nimport { createAdaptedSelector, adapt } from 'reselect-utils';\n\nconst sourceMessageSelector = createAdaptedSelector(\n  inputMessageSelector,\n  (props: { sourceMessageId: number }) => ({\n    messageId: props.sourceMessageId,\n  }),\n);\n\nconst targetMessageSelector = adapt(\n  outputMessageSelector,\n  (props: { targetMessageId: number }) => ({\n    messageId: props.targetMessageId,\n  }),\n);\n\nconst messageDiffSelector = createCachedSelector(\n  sourceMessageSelector,\n  targetMessageSelector,\n  (sourceMessage, targetMessage) => ({\n    sourceMessage,\n    targetMessage,\n  }),\n)({\n  keySelector: (state, props) =>\n    \\`\\${props.sourceMessageId}:\\${props.targetMessageId}\\`,\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}